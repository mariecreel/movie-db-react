{"version":3,"sources":["CardList.js","SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["CardList","movie","className","src","data","poster_path","alt","title","release_date","vote_average","overview","id","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","event","a","preventDefault","console","log","url","fetch","res","json","results","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEe,SAASA,EAASC,GAC/B,OACM,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,cACfC,IAAG,0DAAqDF,EAAMG,KAAKC,aACnEC,IAAKL,EAAMG,KAAKG,MAAQ,YACxB,sBAAKL,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BD,EAAMG,KAAKG,QACxC,4BAAG,mDAAsBN,EAAMG,KAAKI,kBACpC,4BAAG,6CAAgBP,EAAMG,KAAKK,kBAC9B,mBAAGP,UAAU,aAAb,SAA2BD,EAAMG,KAAKM,gBARfT,EAAMG,KAAKO,ICD/B,SAASC,IAAc,MAGVC,mBAAS,IAHC,mBAG7BC,EAH6B,KAGtBC,EAHsB,OAMRF,mBAAS,IAND,mBAM7BG,EAN6B,KAMrBC,EANqB,KAQ9BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAME,iBACNC,QAAQC,IAAI,cAGNC,EALa,kHAKkGV,EALlG,gDAQCW,MAAMD,GARP,cAQXE,EARW,gBASEA,EAAIC,OATN,OASXvB,EATW,OAWjBa,EAAUb,EAAKwB,SAXE,kDAcjBN,QAAQC,IAAR,MAdiB,0DAAH,sDAoBlB,OACE,qCACA,uBAAMrB,UAAU,OAAO2B,SAAUX,EAAjC,UACE,uBAAOhB,UAAU,QAAQ4B,QAAQ,QAAjC,wBACA,uBAAO5B,UAAU,QAAQ6B,KAAK,OAAOC,KAAK,QAC1CC,YAAY,0BACZC,MAAOpB,EAAOqB,SAAU,SAAChB,GAAD,OAAWJ,EAASI,EAAMiB,OAAOF,UACzD,wBAAQhC,UAAU,SAAS6B,KAAK,SAAhC,uBAEF,sBAAK7B,UAAU,YAAf,UACCc,EAAOqB,QAAO,SAAApC,GAAK,OAAIA,EAAMI,eAAaiC,KAAI,SAAArC,GAAK,OAChD,cAACD,EAAD,CAAUI,KAAMH,OAFpB,UC5BWsC,MATf,WACE,OACE,sBAAKrC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,0BACA,cAACU,EAAD,QCKS4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e9e25ee2.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function CardList(movie){\n  return(\n        <div className=\"card\" key={movie.data.id}>\n          <img className=\"card--image\"\n          src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2/${movie.data.poster_path}`}\n          alt={movie.data.title + ' poster'}/>\n          <div className=\"card--content\">\n            <h3 className=\"card--title\">{movie.data.title}</h3>\n            <p><small>RELEASE DATE: {movie.data.release_date}</small></p>\n            <p><small>RATING: {movie.data.vote_average}</small></p>\n            <p className=\"card--desc\">{movie.data.overview}</p>\n          </div>\n        </div>\n  )\n};\n","import React, {useState} from \"react\";\nimport CardList from \"./CardList.js\"\n\nexport default function SearchMovies(){\n\n  // states: input query, movies to display\n  const [query, setQuery] = useState(''); // returns state, and\n                                          //function to change state\n  //create state for movies, and update that state appropriately\n  const [movies, setMovies] = useState([])\n\n  const searchMovies = async (event) => {\n    event.preventDefault();\n    console.log(\"submitting\");\n\n    //const query = \"Jurassic Park\"; // debug\n    const url=`https://api.themoviedb.org/3/search/movie?api_key=a77003fdb339c52990623603a013c891&language=en-US&query=${query}&page1&include_adult=false`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      //console.log(data); debug\n      setMovies(data.results);\n      //console.log(movies);\n    }catch(err){\n      console.log(err)\n    }\n  }\n  // target is input, value is the value of the input\n  // get around react's parent tag restrictionm with empty tags\n  // the filter method only shows movies with poster paths\n  return(\n    <>\n    <form className=\"form\" onSubmit={searchMovies}>\n      <label className=\"label\" htmlFor=\"query\">Movie Name</label>\n      <input className=\"query\" type=\"text\" name=\"query\"\n      placeholder=\"i.e. Gone with the Wind\"\n      value={query} onChange={(event) => setQuery(event.target.value)}/>\n      <button className=\"button\" type=\"submit\">Search</button>\n    </form>\n    <div className=\"card-list\">\n    {movies.filter(movie => movie.poster_path).map(movie => (\n        <CardList data={movie}/>\n    ))};\n    </div>\n    </>\n  )\n}\n","import './index.css';\nimport SearchMovies from './SearchMovies.js'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Movie Search</h1>\n      <SearchMovies/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}