{"ast":null,"code":"var _jsxFileName = \"/Users/nemesis/Documents/movie-db-site-react/src/SearchMovies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchMovies() {\n  _s();\n\n  // states: input query, movies to display\n  const [query, setQuery] = useState(''); // returns state, and\n  //function to change state\n  //create state for movies, and update that state appropriately\n\n  const [movies, setMovies] = useState([]);\n\n  const searchMovies = async event => {\n    event.preventDefault();\n    console.log(\"submitting\"); //const query = \"Jurassic Park\"; // debug\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=a77003fdb339c52990623603a013c891&language=en-US&query=${query}&page1&include_adult=false`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json(); //console.log(data); debug\n\n      setMovies(data.results); //console.log(movies);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // target is input, value is the value of the input\n  // get around react's parent tag restrictionm with empty tags\n  // the filter method only shows movies with poster paths\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: searchMovies,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        htmlFor: \"query\",\n        children: \"Movie Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"query\",\n        type: \"text\",\n        name: \"query\",\n        placeholder: \"i.e. Gone with the Wind\",\n        value: query,\n        onChange: event => setQuery(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-list\",\n      children: movies.filter(movie => movies.poeter_path).map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"card--image\",\n          src: `https://image.tmdb.org/t/p/w300_and_h450_bestv2/${movie.poster_path}`,\n          alt: movie.title + ' poster'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card--content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"card--title\",\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"RELEASE DATE \", movie.release_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"RATING \", movie.vote_average]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card--desc\",\n            children: movie.overview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SearchMovies, \"A5Q53hr/y+zqHAz15wFmuqejARs=\");\n\n_c = SearchMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchMovies\");","map":{"version":3,"sources":["/Users/nemesis/Documents/movie-db-site-react/src/SearchMovies.js"],"names":["React","useState","SearchMovies","query","setQuery","movies","setMovies","searchMovies","event","preventDefault","console","log","url","res","fetch","data","json","results","err","target","value","filter","movie","poeter_path","map","poster_path","title","release_date","vote_average","overview","id"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function SearchMovies(){\n\n  // states: input query, movies to display\n  const [query, setQuery] = useState(''); // returns state, and\n                                          //function to change state\n  //create state for movies, and update that state appropriately\n  const [movies, setMovies] = useState([])\n\n  const searchMovies = async (event) => {\n    event.preventDefault();\n    console.log(\"submitting\");\n\n    //const query = \"Jurassic Park\"; // debug\n    const url=`https://api.themoviedb.org/3/search/movie?api_key=a77003fdb339c52990623603a013c891&language=en-US&query=${query}&page1&include_adult=false`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      //console.log(data); debug\n      setMovies(data.results);\n      //console.log(movies);\n    }catch(err){\n      console.log(err)\n    }\n  }\n  // target is input, value is the value of the input\n  // get around react's parent tag restrictionm with empty tags\n  // the filter method only shows movies with poster paths\n  return(\n    <>\n    <form className=\"form\" onSubmit={searchMovies}>\n      <label className=\"label\" htmlFor=\"query\">Movie Name</label>\n      <input className=\"query\" type=\"text\" name=\"query\"\n      placeholder=\"i.e. Gone with the Wind\"\n      value={query} onChange={(event) => setQuery(event.target.value)}/>\n\n      <button className=\"button\" type=\"submit\">Search</button>\n    </form>\n    <div className=\"card-list\">\n      {movies.filter(movie => movies.poeter_path).map(movie => (\n        <div className=\"card\" key={movie.id}>\n          <img className=\"card--image\"\n          src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2/${movie.poster_path}`}\n          alt={movie.title + ' poster'}/>\n          <div className=\"card--content\">\n            <h3 className=\"card--title\">{movie.title}</h3>\n            <p><small>RELEASE DATE {movie.release_date}</small></p>\n            <p><small>RATING {movie.vote_average}</small></p>\n            <p className=\"card--desc\">{movie.overview}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}